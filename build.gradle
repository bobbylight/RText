import java.time.Instant
import org.apache.tools.ant.taskdefs.condition.Os

import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

['java', 'distribution', 'checkstyle', 'maven-publish', 'signing', 'eclipse' ].each { apply plugin: it }

group = 'com.fifesoft'
ext.isReleaseVersion = !project.version.endsWith('SNAPSHOT')
// Note: Local JDK 21: /Library/Java/JavaVirtualMachines/jdk-21.0.5+11/Contents/Home

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)

configurations.all { // Check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	implementation('com.fifesoft.rtext:fife.common:6.0.4-SNAPSHOT')

	implementation('com.fifesoft:rsyntaxtextarea:3.6.0')
	implementation('com.fifesoft:autocomplete:3.3.2')
	implementation('com.fifesoft:rstaui:3.3.1')
	implementation('com.fifesoft:spellchecker:3.4.0')
	implementation('com.fifesoft:languagesupport:3.3.0')

	implementation 'com.formdev:flatlaf:3.6'

	implementation 'com.github.jtidy:jtidy:1.0.5'
	implementation 'org.apache.groovy:groovy-all:4.0.27'
	implementation 'com.esotericsoftware:jsonbeans:0.7'
	implementation 'org.graalvm.js:js:24.2.1'
	implementation 'org.graalvm.js:js-scriptengine:24.2.1'
	implementation 'org.jruby:jruby:10.0.0.1'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
}
repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url = 'https://oss.sonatype.org/content/repositories/snapshots'
	}
}

wrapper {
	gradleVersion = '8.14.2'
}

checkstyle {
	toolVersion = '10.25.0'
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
}

test {
	useJUnitPlatform()
}

static isPluginJar(jarName) {
	return jarName.startsWith('plugin-') ||
		jarName.startsWith('groovy') || jarName.startsWith('jsonbeans') ||
		jarName.startsWith('jtidy') || jarName.startsWith('languagesupport') ||
		jarName.startsWith('rhino') || jarName.startsWith('tidy')
}

compileJava {
	options.release = Integer.parseInt(javaReleaseVersion)
	options.debug = true
	options.debugOptions.debugLevel = 'source,vars,lines'
	options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

processResources {
	doFirst {
		new File(projectDir.absolutePath, 'build/resources/main/build-date.txt').text =
			ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT)
	}
}

java {
	withSourcesJar()
	withJavadocJar()
}
jar {
	manifest {
		attributes(
			'Specification-Title': 'rtext',
			'Specification-Version': version,
			'Implementation-Title': 'org.fife.rtext',
			'Implementation-Version': version,
			'Build-Date': Instant.now().toString(),
			'Main-Class': 'org/fife/rtext/Main',
			'Class-Path': configurations.runtimeClasspath.findAll { !isPluginJar(it.name) }.collect {
				def name = it.name
				System.out.println(name)
				return name
			}.join(' ')
		)
	}
	include 'build-date.txt'
	include 'org/fife/**'
	exclude 'org/fife/rtext/plugins/**'
}

// RText is odd in that we generate multiple jars from a single source tree.
//task mainJar(type: Jar) {
//}
task consoleJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/console/**'
		archiveFileName = provider { 'plugin-console.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.console.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task fileSystemTreeJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/filesystemtree/**'
		archiveFileName = provider { 'plugin-fileSystemTree.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.filesystemtree.FileSystemTreePlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task heapIndicatorJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/heapindicator/**'
		archiveFileName = provider { 'plugin-heapIndicator.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.heapindicator.HeapIndicatorPlugin',
			'Fife-Plugin-Load-Priority': 'low'
		)
	}
}
task macroSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/macros/**'
		archiveFileName = provider { 'plugin-macros.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.macros.MacroPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task projectSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/project/**'
		archiveFileName = provider { 'plugin-projects.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.project.ProjectPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task languageSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/langsupport/**'
		archiveFileName = provider { 'plugin-languageSupport.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.langsupport.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task sourceBrowserJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/sourcebrowser/**'
		archiveFileName = provider { 'plugin-sourceBrowser.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.sourcebrowser.SourceBrowserPlugin',
			'Fife-Plugin-Load-Priority': 'high'
		)
	}
}
task taskListJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tasks/**'
		archiveFileName = provider { 'plugin-tasks.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tasks.TasksPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task tidyJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tidy/**'
		archiveFileName = provider { 'plugin-tidy.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tidy.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task toolsJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tools/**'
		archiveFileName = provider { 'plugin-tools.jar' }
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tools.ToolPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
artifacts {
	archives /*mainJar,*/ consoleJar, fileSystemTreeJar, heapIndicatorJar,
			macroSupportJar, projectSupportJar, languageSupportJar,
			sourceBrowserJar, taskListJar, tidyJar, toolsJar
}

distTar.dependsOn(jar, consoleJar, fileSystemTreeJar, heapIndicatorJar, macroSupportJar, projectSupportJar,
	languageSupportJar, sourceBrowserJar, taskListJar, tidyJar, toolsJar)
distZip.dependsOn(jar, consoleJar, fileSystemTreeJar, heapIndicatorJar, macroSupportJar, projectSupportJar,
	languageSupportJar, sourceBrowserJar, taskListJar, tidyJar, toolsJar)
installDist.dependsOn(jar, consoleJar, fileSystemTreeJar, heapIndicatorJar, macroSupportJar, projectSupportJar,
	languageSupportJar, sourceBrowserJar, taskListJar, tidyJar, toolsJar)

def getDistributionFiles(configurations) {

	def distFiles = [
			'build/libs', // The built jars
			configurations.runtimeClasspath // Gradle dependencies
	]

	// Copy native libraries from FifeCommon, if it's checked out alongside this project
	def fifeCommonNativesDir = new File("${projectDir.absolutePath}/../FifeCommon/native")
	if (fifeCommonNativesDir.isDirectory()) {
		distFiles += fifeCommonNativesDir.listFiles().collect { it.getAbsolutePath() }
	}

	return distFiles
}

distributions {
	main {

		distributionBaseName = 'rtext'
		contents {
			exclude([ '**/*-sources.jar', '**/*-javadoc.jar' ])
			from { getDistributionFiles(configurations) }
			eachFile { details ->
				def path = details.path
				if (isPluginJar(path)) {
					//println "Is a plugin jar: ${path}"
					details.path = "plugins/" + path
				}
				else if (path.contains("-javadoc.jar") || path.contains("-source.jar")) {
					// Ignore
				}
				else if (path.contains("RText-") && path.endsWith(".jar")) {
					details.path = "RText.jar"
				}
			}
//			rename "(.+)\\-${version}\\.jar", '$1.jar'
		}
	}
	src {
		distributionBaseName = 'rtext'
	}
}

srcDistZip.archiveClassifier = 'src'
srcDistZip {
	from projectDir
	include '.classpath'
	include '.gitignore'
	include '.project'
	include 'build.gradle'
	include 'gradle.properties'
	include 'gradle/**/*'
	include 'gradlew*'
	include 'lib/**'
	include 'mac/**'
	include 'README.md'
	include '.settings/**'
	include 'MakeRTextInstaller.nsi'
	include 'RText.exe'
	include 'src/**'
	include 'TO-DO'
}


publishing {
	repositories {
		maven {
			def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
			def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
			url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
			credentials { // Credentials usually kept in user's .gradle/gradle.properties
				// We must defensively check for these properties so Travis CI build works
				username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'unknown'
				password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'unknown'
			}
		}
	}
	publications {
		maven(MavenPublication) {

			groupId = 'com.fifesoft.rtext'
			artifactId = 'rtext'
			version = version

			from components.java

			pom {
				name = 'rtext'
				description = 'RText is a powerful, cross-platform programmer\'s text editor written in Java. It is designed ' +
					'to be easy to use, highly customizable and flexible. Part of RText\'s design is for the source code ' +
					'to be simple, easy to understand, and well documented, so that other programmers can look into its ' +
					'inner-workings and figure out how RText ticks with ease. A good place to start (besides the source ' +
					'code) is the Javadoc for all classes used in the project. '
				url = 'https://github.com/bobbylight/RText'
				inceptionYear = '2003'
				packaging = 'jar'
				licenses {
					license {
						name = 'BSD-3-Clause'
						url = 'https://github.com/bobbylight/RText/blob/master/src/main/dist/License.txt'
					}
				}
				developers {
					developer {
						name = 'Robert Futrell'
					}
				}
				scm {
					url = 'https://github.com/bobbylight/RText'
					connection = 'scm:git:git://github.com/bobbylight/RText'
					developerConnection = 'scm:git:git@github.com:bobbylight/RText'
					if (isReleaseVersion) {
						tag = project.version
					}
				}
			}
		}
	}
}

signing {
	// Don't require signing for e.g. ./gradlew install
	required = gradle.taskGraph.hasTask('publish') && isReleaseVersion
	sign publishing.publications.maven
}
tasks.withType(Sign) {
	onlyIf { isReleaseVersion }
}


def getWindowsJreDependencyList = { installDistDir ->

	// Store the output instead of printing to the console
	def stdout = new ByteArrayOutputStream()

	exec {
		workingDir installDistDir
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			commandLine "${jdkRoot}/bin/jdeps", '--ignore-missing-deps', '--list-deps', 'RText.jar', 'plugins/plugin*.jar'
		}
		else {
			commandLine '/bin/bash', '-c', "${jdkRoot}/bin/jdeps --ignore-missing-deps --list-deps RText.jar plugins/plugin*.jar"
		}
		standardOutput = stdout
	}

	def retVal =  String.join(',', stdout.toString().split('[ \t\r\n]+'))
	if (retVal[0] == ',') {
		retVal = retVal.substring(1)
	}
	retVal += ',java.logging,jdk.unsupported' // GraalVM (for JS support) needs java.util.logging and sun.misc.Unsafe
	retVal += ',java.management' // Needed for JRuby
	retVal += ',jdk.crypto.ec' // Needed to make HTTPS calls
	return retVal
}

task generateWindowsJre {
	doLast {

		def installDistDir = 'build/install/rtext'

		def moduleList = getWindowsJreDependencyList(installDistDir)
		println "Generating JRE with modules: ${moduleList}"

		exec {
			workingDir installDistDir
			commandLine "${jdkRoot}/bin/jlink", '--module-path', "\"${jdkRoot}/jmods\"", '--add-modules',
					moduleList, '--output', embeddedJreFolderName, '--strip-debug', '--compress', '2',
					'--no-header-files', '--no-man-pages'
		}
	}
}
generateWindowsJre.dependsOn('build', 'installDist')

task generateWindowsStarterExe {
	doLast {
		exec {
			commandLine launch4jExe, 'launch4j.xml'
		}
	}
}
generateWindowsStarterExe.dependsOn('generateWindowsJre')

task generateMacApp {
	doLast {
		exec {
			commandLine '/bin/bash', '-c', './mac/build-mac-app.sh'
		}
	}
}
generateMacApp.dependsOn('build', 'installDist')
